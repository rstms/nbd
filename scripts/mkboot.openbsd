#!/bin/sh

# make openbsd boot cd ISO

set -ue

# default fqdn
netboot_fqdn=netboot.rstms.net

if [ -e /etc/nbd.conf ]; then
  . /etc/nbd.conf
fi

echo https://${netboot_fqdn}

mac=$1
if [ $# -gt 1 ]; then
    serial=$2
    echo "Serial console: '${serial}'"
else
    serial=
fi

OSMAJOR=7
OSMINOR=5
OSREV=${OSMAJOR}.${OSMINOR}
MACHINE=amd64

netboot=/var/www/netboot

SRC_ISO=/var/www/htdocs/pub/OpenBSD/${OSREV}/${MACHINE}/cd${OSMAJOR}${OSMINOR}.iso
DST_ISO=${netboot}/${mac}.iso
SRC_IMG=/var/www/htdocs/pub/OpenBSD/${OSREV}/${MACHINE}/install${OSMAJOR}${OSMINOR}.img
DST_IMG=${netboot}/${mac}.img

fail() {
  echo >&2 $0: "$@"
  exit 1
}

vnd0_clear() {
    vnconfig -l | grep -q 'vnd0: not in use'
}

vnd1_clear() {
    vnconfig -l | grep -q 'vnd1: not in use'
}

vnd2_clear() {
    vnconfig -l | grep -q 'vnd2: not in use'
}

vnd0_clear || fail 'vnd0 in use' 
vnd1_clear || fail 'vnd1 in use' 
vnd2_clear || fail 'vnd2 in use' 

cleanup() {
    if [ -n "$tempdir" ]; then
	if [ -e "$tempdir" ]; then
	    rm -rf $tempdir
	fi
    fi
    mounted=$(mount | awk '/^\/dev\/vnd0/{ print $1 }')
    if [ -n "$mounted" ]; then
	umount $mounted
    fi
    vnd0_clear || vnconfig -u vnd0
    mounted=$(mount | awk '/^\/dev\/vnd1/{ print $1 }')
    if [ -n "$mounted" ]; then
	umount $mounted
    fi
    vnd1_clear || vnconfig -u vnd1
    mounted=$(mount | awk '/^\/dev\/vnd2/{ print $1 }')
    if [ -n "$mounted" ]; then
	umount $mounted
    fi
    vnd2_clear || vnconfig -u vnd2
}

tempdir=$(mktemp -d)
trap cleanup EXIT

[ -n "$mac" ] || fail no MAC

cd $tempdir

get_file() {
  cp $1 $2
  chown 0:0 $2
  chmod 0600 $2
}

write_rc_netboot() {
    cat -<<'EOF'
#!/bin/ksh

FUNCS_ONLY=1
. /autoinstall

ehandler() {
    echo "netboot configuration failed. rebooting..."
    sleep 10
    reboot
}
trap ehandler EXIT
    
set -e
set -x

netboot_update_image() {

    echo "Updating preinstalled image..."
    mkdir -p /mnt
    mount /dev/${_disk}a /mnt
    chroot /mnt /bin/sh -c "mount -a"
    /rc.package
    echo "Update complete."
}

configure_netboot() {
    local _nbif _mac _disk _iter _url

    . /netboot.env

    _nbif=$(get_ifs)
    if [ -n "$_nbif" ]; then
        echo "netboot interface: $_nbif"
        ifconfig $_nbif group netboot
    else
        echo "interface not detected"
        exit 1
    fi
  
    if [[ -x /sbin/dhcpleased ]]; then
        echo dhcpleased is present and executable
    else
        echo dhcpleased is not executable!
        exit 1
    fi

    ifconfig $_nbif inet autoconf up
  
    if ! wait_for_dhcp_info $_nbif 30; then
        echo "DHCP config timeout on interface $_nbif"
        exit 1
    fi

    echo "Setting clock from ${_url}/utc..."
    _iter=0
    while [ $_iter -lt 10 ]; do
	_iter=$(( $_iter + 1 ))
	if ftp -S noverifytime ${_url}/utc; then
	    break
	else
	    echo retrying...
	    sleep 1
	fi
    done
    date -f '%s' $(cat utc)

    echo "Disknames: '$(sysctl hw.disknames)' "
    _disk=$(sysctl hw.disknames | sed -n 's/.*[,=]\([^cr]d0\):.*/\1/p;q')
    echo "Using disk '$_disk'"
    
    cd /dev
    . ./MAKEDEV $_disk
    cd /

    if [ -e /install.image ]; then
        netboot_update_image
	trap - EXIT
	reboot
    fi

    dd if=/dev/zero of=/dev/${_disk}c count=128
    disklabel -Aw $_disk
    newfs /dev/r${_disk}a
    mkdir -p /usr/local
    mount /dev/${_disk}a /usr/local
    
    cd /usr/local
    ftp ${_url}/gdl.tgz
    tar zxf gdl.tgz
    chmod 0755 bin/*
    bin/install_gdl
    cd /

    /usr/local/bin/gdl -ca /etc/ssl/keymaster.pem -cert /etc/ssl/netboot.pem -key /etc/ssl/netboot.key ${_url}/${_mac}.conf
    mv ${_mac}.conf auto_install.conf

    umount /usr/local
    dd if=/dev/zero of=/dev/${_disk}c count=128
    
    ifconfig $_nbif inet -autoconf delete down 2>/dev/null || true
    rm -f /var/db/dhcpleased/$_nbif || true
}

configure_netboot

# disable reboot on error
trap - EXIT
EOF
}

write_rc_package() {
    cat -<<'EOF'
#!/bin/ksh

ehandler() {
    echo "site package install failed. rebooting..."
    sleep 10
    reboot
}
trap ehandler EXIT
    
set -e

install_site_package() {
    local _mac
    local _url
    local _gdl
    . /netboot.env
    _gdl='/usr/local/bin/gdl -ca /etc/ssl/keymaster.pem -cert /etc/ssl/netboot.pem -key /etc/ssl/netboot.key'
    if [ -x /mnt/usr/local/bin/gdl ]; then
	echo "Using existing gdl:"
	ls -l /mnt/usr/local/bin/gdl
    else 
	echo "Downloading ${_url}/gdl.tgz..."
	cd /mnt/usr/local/bin
	ftp ${_url}/gdl.tgz
	tar zxf gdl.tgz bin/gdl
	mv bin/gdl .
	rm -rf bin
	chmod 0755 gdl
	rm gdl.tgz
    fi
    cd /
    cp /etc/ssl/keymaster.pem /mnt/etc/ssl
    cp /etc/ssl/netboot.pem /mnt/etc/ssl
    cp /etc/ssl/netboot.key /mnt/etc/ssl
    chmod 0444 /mnt/etc/ssl/*.pem
    chmod 0400 /mnt/etc/ssl/netboot.key
    echo "Downloading ${_url}/${_mac}.tgz..."
    chroot /mnt ${_gdl} ${_url}/${_mac}.tgz
    echo "Installing site package ${_mac}.tgz..."
    chroot /mnt tar xzvphf /${_mac}.tgz
    chmod 0755 /mnt
    rm -f /mnt/${_mac}.tgz
    mkdir /mnt/root/.netboot
    chmod 0700 /mnt/root/.netboot
    if [ -x /mnt/postinstall ]; then
	echo "Running postinstall..."
        cp /mnt/postinstall /mnt/root/.netboot/postinstall
	chroot /mnt sh -c '/postinstall 2>/root/.netboot/postinstall.stderr | tee /root/.netboot/postinstall.stdout'
	echo $? >/mnt/root/.netboot/postinstall.exitcode
    fi
    rm -f /mnt/postinstall
    if [ -x /mnt/install.site ]; then
	echo "Running install.site..."
        cp /mnt/install.site /mnt/root/.netboot/install.site
	chroot /mnt sh -c '/install.site 2>/root/.netboot/install.site.stderr | tee /root/.netboot/install.site.stdout'
	echo $? >/mnt/root/.netboot/install.site.exitcode
    fi
    rm -f /mnt/install.site

    if [ -x /mnt/install.image ]; then
	echo "Running install.image..."
	cp /mnt/install.image /mnt/root/.netboot/install.image
	chroot /mnt sh -c '/install.image 2>/root/.netboot/install.image.stderr | tee /root/.netboot/install.image.stdout'
	echo $? > /mnt/root/.netboot/install.image.exitcode
    fi
    rm -f /mnt/install.image

    echo "${_gdl} ${_url}/api/booted/${_mac} /dev/null" >>/mnt/etc/rc.firsttime
    echo "rm -f /etc/ssl/netboot.pem" >>/mnt/etc/rc.firsttime
    echo "rm -f /etc/ssl/netboot.key" >>/mnt/etc/rc.firsttime
    cp /mnt/etc/rc.firsttime /mnt/root/.netboot/rc.firsttime
}

install_site_package

trap - EXIT

EOF
}

modify_ramdisk_on_vnd1() {

  # mount ramdisk using vnd1
  vnconfig vnd1 ramdisk.img
  rm -rf rd
  mkdir rd
  mount /dev/vnd1a rd

  # modify ramdisk files
  write_rc_netboot >rd/rc.netboot
  chown root.wheel rd/rc.netboot
  chmod 0755 rd/rc.netboot
  
  write_rc_package >rd/rc.package
  chown root.wheel rd/rc.package
  chmod 0755 rd/rc.package

  echo "_url=https://${netboot_fqdn}" >rd/netboot.env
  echo "_mac='${mac}'" >>rd/netboot.env
  chmod 0644 rd/netboot.env

  # extract /etc/ssl from tarball to ramdisk /etc/ssl
  tar zxf ${netboot}/${mac}.tgz etc/ssl

  # extract /install.image from tarball to ramdisk /
  if tar zxf ${netboot}/${mac}.tgz install.image 2>/dev/null; then
      echo "Image update script detected."
      install -o root -g wheel -m 0755 install.image rd/install.image
  fi
  
  # install certs to ramdisk /etc/ssl
  install -o root -g wheel -m 0444 etc/ssl/keymaster.pem rd/etc/ssl/keymaster.pem
  install -o root -g wheel -m 0444 etc/ssl/netboot.pem rd/etc/ssl/netboot.pem
  install -o root -g wheel -m 0400 etc/ssl/netboot.key rd/etc/ssl/netboot.key
  
  # replace ramdisk CA with keymaster.pem
  install -o root -g wheel -m 0444 etc/ssl/keymaster.pem rd/etc/ssl/cert.pem

  # remove tarball etc/ssl dir
  rm -rf etc
  
  # add rc.netboot call to ramdisk /.profile
  awk <rd/.profile '{print $0} /autoinstall -x/{print "\t/rc.netboot"}' >rd/profile
  mv rd/profile rd/.profile
  chmod 0755 rd/.profile
  
  # add rc.package call to ramdisk /install.sub
  awk <rd/install.sub '/exec reboot$/{ print "\t/rc.package" } {print $0}' >rd/_install.sub
  mv rd/_install.sub rd/install.sub
  chmod 0755 rd/install.sub

  # unmount ramdisk
  umount rd
  vnconfig -u vnd1
  rmdir rd

}

build_img() {

  # create dest image
  dd if=/dev/zero of=$DST_IMG bs=1024K count=10 2>/dev/null
  vnconfig vnd0 $DST_IMG
  
  # partition
  fdisk -b960 -g -y vnd0
  disklabel -wA vnd0
  newfs /dev/rvnd0a
  
  # mount dst on vnd0
  mkdir dst
  mount /dev/vnd0a dst
  
  # mount src image on vnd1
  mkdir src
  vnconfig vnd1 $SRC_IMG
  mount /dev/vnd1a src
  
  # copy EFI partition 
  dd if=/dev/vnd1i of=/dev/vnd0i 
  
  # copy src files to dst
  cp -rp src/boot dst/boot
  cp -rp src/etc dst/etc
  
  # copy src compressed ramdisk kernel
  cp src/bsd.rd bsd.rd.gz
  
  # umount source and free up vnd1
  umount src
  vnconfig -u vnd1
  rmdir src
  
  # unzip compressed kernel from source image
  gunzip bsd.rd.gz
  
  # extract ramdisk from kernel
  rdsetroot -x bsd.rd ramdisk.img
  
  cp ramdisk.img img_ramdisk.img
  
  modify_ramdisk_on_vnd1
  
  # insert modified ramdisk into cd image kernel
  rdsetroot bsd.rd ramdisk.img
  rm ramdisk.img
  
  # compress kernel and write into cd filesystem
  gzip -9cn bsd.rd >dst/bsd.rd
  ln dst/bsd.rd dst/bsd
  
  # point bootloader at ramdisk kernel
  echo "set image /bsd.rd" >dst/etc/boot.conf
  
  # optionally enable serial
  if [ -n "$serial" ]; then
    echo "set tty $serial" >>dst/etc/boot.conf
  fi
  
  umount dst
  
  # install bootloaders
  installboot -v vnd0
  
  # free up vnd0
  vnconfig -u vnd0
}


build_iso() {

  # create directory for cd filesystem
  mkdir -p cd/${OSREV}/${MACHINE}
  mkdir cd/etc
  
  # mount source ISO on vnd0 and extract files
  mkdir iso
  vnconfig vnd0 $SRC_ISO
  mount /dev/vnd0a iso
  cp iso/${OSREV}/${MACHINE}/bsd* cd/${OSREV}/${MACHINE}/
  cp iso/${OSREV}/${MACHINE}/cdb* cd/${OSREV}/${MACHINE}/
  
  # free up vnd0
  umount iso
  vnconfig -u vnd0
  rmdir iso
  
  # extract ramdisk from kernel
  rdsetroot -x cd/${OSREV}/${MACHINE}/bsd.rd ramdisk.img
  
  modify_ramdisk_on_vnd1
  
  cp ramdisk.img mod_cd_ramdisk.img
  
  # insert modified ramdisk into cd image kernel
  rdsetroot cd/${OSREV}/${MACHINE}/bsd.rd ramdisk.img
  rm ramdisk.img
  
  # point bootloader at ramdisk kernel
  echo "set image /${OSREV}/${MACHINE}/bsd.rd" >cd/etc/boot.conf
  
  # optionally enable serial
  if [ -n "$serial" ]; then
    echo "set tty $serial" >>cd/etc/boot.conf
  fi
  
  # build the iso
  mkhybrid -a -R -T -L -l -d -D -N -o $DST_ISO \
          -A "OpenBSD ${OSREV} ${MACHINE} netboot CD" \
  	    -P "Copyright (c) `date +%Y` Theo de Raadt, The OpenBSD project" \
  	    -p "Theo de Raadt <deraadt@openbsd.org>, install modifications by Matt Krueger <mkrueger@rstms.net>" \
  	    -V "OpenBSD/${MACHINE}   ${OSREV} netboot CD" \
  	    -b ${OSREV}/${MACHINE}/cdbr \
              -c ${OSREV}/${MACHINE}/boot.catalog \
  	    cd
}

#build_image
build_iso

/root/nbdperm
ls -l ${netboot}/${mac}*
